Git Commands
------------------------------------------------------------------------------------------------------
 
1.  git config --global user.name "Your_Name" ---> To configure user name in git
2.  git config --global user.email "your_email@gmail.com"  ---> To configure user email in git
3.  git  init --> Initialize empty git repository
4.  git status --> To check the current Status
5.  git restore <file> --> To Discard the changes in working directory
6.  git add <file> --> To add the file in the Staging area of git
7.  git rm --cached <file> --> To unstage
8.  git commit -m "Commit here" --> To commit the Statement for tracking
9.  git log --> To check the history of the file.
10. git log --pretty=oneline --max-count=2
    git log --pretty=oneline --since='5 minutes ago'
    git log --pretty=oneline --until='5 minutes ago'
    git log --pretty=oneline --author=<your name>
    git log --pretty=oneline --all
11. Setup aliases and shortcuts for git commands
    Got to --> .git folder --> edit <config> 
    [alias]
           co = checkout
           ci = commit
           st = status
           br = branch
           hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
12. Get the hashes for previous versions
    $git log
    $git checkout f7c41d3
    Note: switching to 'f7c41d3'.

    You are in 'detached HEAD' state. You can look around, make experimental
    changes and commit them, and you can discard any commits you make in this
    state without impacting any branches by switching back to a branch.

    If you want to create a new branch to retain commits you create, you may
    do so (now or later) by using -c with the switch command. Example:

       $git switch -c <new-branch-name>

    Or undo this operation with:
       $git switch -

   Turn off this advice by setting config variable advice.detachedHead to false

   HEAD is now at f7c41d3 First Commit
13. Revert changes in the Working directory
    $git checkout <file>
14. Revert changes that have been staged
    $git reset HEAD <file>
14. Sometimes you realized that a change that you have already committed was not correct and you wish to undo that commit. There are several ways of handling that issue, and the way we are going to use in this lab is always safe.
    $git revert HEAD --no-edit
    Note*: This will show the revert commit in the log.
15. Removing Commits from a Branch
    before we remove the commits, let’s mark the latest commit with a tag so we can find it again.
    $git tag oops
    $git reset --hard v1   ---> or (the hash value of the commit) and here v1 is the tag
    NOte*: Here we see that the bad commits haven’t disappeared. They are still in the repository. It’s just that they are no longer listed in the main branch. If we hadn’t tagged them, they would still be in the repository, but there would be no way to reference them other than using their hash names. Commits that are unreferenced remain in the repository until the system runs the garbage collection software.

    Resets on local branches are generally safe. Any “accidents” can usually be recovered from by just resetting again with the desired commit.
    However, if the branch is shared on remote repositories, resetting can confuse other users sharing the branch.
16. 
    
