Git Commands
------------------------------------------------------------------------------------------------------
 
1.  git config --global user.name "Your_Name" ---> To configure user name in git
2.  git config --global user.email "your_email@gmail.com"  ---> To configure user email in git
3.  git  init --> Initialize empty git repository
4.  git status --> To check the current Status
5.  git restore <file> --> To Discard the changes in working directory
6.  git add <file> --> To add the file in the Staging area of git
7.  git rm --cached <file> --> To unstage
8.  git commit -m "Commit here" --> To commit the Statement for tracking
9.  git log --> To check the history of the file.
10. git log --pretty=oneline --max-count=2
    git log --pretty=oneline --since='5 minutes ago'
    git log --pretty=oneline --until='5 minutes ago'
    git log --pretty=oneline --author=<your name>
    git log --pretty=oneline --all
11. Setup aliases and shortcuts for git commands
    Got to --> .git folder --> edit <config> 
    [alias]
           co = checkout
           ci = commit
           st = status
           br = branch
           hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
12. Get the hashes for previous versions
    $git log
    $git checkout f7c41d3
    Note: switching to 'f7c41d3'.

    You are in 'detached HEAD' state. You can look around, make experimental
    changes and commit them, and you can discard any commits you make in this
    state without impacting any branches by switching back to a branch.

    If you want to create a new branch to retain commits you create, you may
    do so (now or later) by using -c with the switch command. Example:

       $git switch -c <new-branch-name>

    Or undo this operation with:
       $git switch -

   Turn off this advice by setting config variable advice.detachedHead to false

   HEAD is now at f7c41d3 First Commit

13. Revert changes in the Working directory
    $git checkout <file>

14. Revert changes that have been staged
    $git reset HEAD <file>

14. Sometimes you realized that a change that you have already committed was not correct and you wish to undo that commit. There are several ways of handling that issue, and the way we are going to use in this lab is always safe.
    $git revert HEAD --no-edit
    Note*: This will show the revert commit in the log.

15. Removing the revert Commits from a Branch
    before we remove the commits, let’s mark the latest commit with a tag so we can find it again.
    $git tag oops
    $git reset --hard v1   ---> or (the hash value of the commit) and here v1 is the previous tag of commit.
    NOte*: Here we see that the bad commits haven’t disappeared. They are still in the repository. It’s just that they are no longer listed in the main branch. If we hadn’t tagged them, they would still be in the repository, but there would be no way to reference them other than using their hash names. Commits that are unreferenced remain in the repository until the system runs the garbage collection software.

    Resets on local branches are generally safe. Any “accidents” can usually be recovered from by just resetting again with the desired commit.
    However, if the branch is shared on remote repositories, resetting can confuse other users sharing the branch.

16. The oops tag has served its purpose. Let’s remove it and allow the commits it referenced to be garbage collected.
    $git tag -d oops

17. how to move a file within a repository.
    $git mv <file> <folder>

18. Explore the Structure of .git repository
    $ls -C .git
    $ls -C .git/objects
    $ls -C .git/objects/<dir>
    $ls .git/refs
    $ls .git/refs/heads
    $ls .git/refs/tags
    $cat .git/refs/tags/v1
    $cat .git/HEAD

19. We really don’t want a separate commit for just a small change. Let’s amend the previous commit to include the small change.
    $git commit --amend -m "Add an author/email comment"

20. Let's create a new branch 'greet'.
    $git checkout -b greet  --> this will create the new branch named "greet"
    Now add some file in this branch and do some commit and get back to the main/master branch

21. Just use the git checkout command to switch between branches.
    $git checkout master  --> This command will take you back to the master branch.

22. Now, how to merge two diverging branches to bring the changes back into a single branch >
    $git merge master  --> Merging brings the changes in two branches together. Let’s go back to the greet branch and merge master onto greet.

23. Create a conflicting change in the main branch.
    $git checkout master
    Now create some similar changes in the master branch then add and commit it in the master branch
    $git checkout greet   --> Now, how to handle conflicts during a merge ?
    $git merge master
    Here, we get conflict when we open that file which we had edited.
---------------------------------------------------------------------
    Auto-merging (file_name)
    CONFLICT (add/add): Merge conflict in doc.txt
    Automatic merge failed; fix conflicts and then commit the result.
----------------------------------------------------------------------
    Note*: When you open the file, The first section is the version on the head of the current branch (greet). The second section is the version on the main branch.

    Now, You need to manually resolve the conflict. Modify that file add it in the staging area and commit it.
    Let’s explore the differences between merging and rebasing. In order to do so, we need to rewind the repository back in time before the first merge, and then redo the same steps, but using rebasing rather than merging.
    We will make use the of the reset command to wind the branches back in time.

24. Now, Learn the differences between rebasing and merging.ls

    for this, Let’s go back in time on the greet branch to the point before we merged main onto it. We can reset a branch to any commit we want. Essentially this is modifying the branch pointer to point to anywhere in the commit tree.

    In this case we want to back greet up to the point prior to the merge with main. We need to find the last commit before the merge.
    After doing reset to the last edited commit of master branch and the greet branch we now make some changes in the greet branch

    $git rebase main  --> This time we used the rebase command instead of the merge command to bring in the changes from the main branch.


25. The final result of the rebase is very similar to the merge. The greet branch now contains all of its changes, as well as all the changes from the main branch. However, the commit tree is quite different. The commit tree for the greet branch has been rewritten so that the main branch is a part of the commit history. This leaves the chain of commits linear and much easier to read.

    Don’t use rebase …
    1. If the branch is public and shared with others. Rewriting publicly shared branches will tend to screw up other members of the team.
    2. When the exact history of the commit branch is important (since rebase rewrites the commit history).

26. We’ve kept our greet branch up to date with master (via rebase), now let’s merge the greet changes back into the main branch.
    $git checkout master
    $git merge greet
   Because the head of main is a direct ancestor of the head of the greet branch, git is able to do a fast-forward merge. When fast-forwarding, the branch pointer is simply moved forward to point to the same commit as the greeter branch.

   There will never be conflicts in a fast-forward merge.

27. Working With Multiple Repositories
    These extra repositories may be stored locally, or may be accessed across a network connection.
    Now, create a new repository. Show how to move changes from one repository to another, and how to handle conflicts when they arise between two repositories.

    Note*: We are going be making changes to both copies of our repositories. Make sure to pay attention to which repository you are in at each step of the process.

28. Cloning of Repository
    Go to the working directory and make a clone of your hello repository.
    $cd ..
    $pwd
    $ls
    $git clone original_repo_name cloned_of_original_repo_name
    $ls
    Now, you see the cloned repo of the original repo.
    Explore the newly created repo.
    You should see a main branch (along with HEAD) in the history list. But you will also have a number of strangely named branches (origin/main, origin/greet and origin/HEAD).

29. Make some changes to the original repository so we can try to pull the changes
    now come to the cloned repository
    $git fetch ---> The “git fetch” command will fetch new commits from the remote repository, but it will not merge these commits into the local branches.

30. To get the pulled changes into the current branch and working directory.
    $git merge origin/master   ---> There are the changes. Even though “git fetch” does not merge the changes, we can still manually merge the changes from the remote repository.

31. git pull is equivalent to a git fetch followed by a git merge.

32. Concept of Bare Repository

33. Adding a remote repository
    $git remote add origin <remote_repository_URL>

34. Pushing a Change
    $git push origin master
